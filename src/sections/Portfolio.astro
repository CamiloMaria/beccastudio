---
import { Image } from "astro:assets";
import { Button } from "../components";

// Define the interface for image items
interface PortfolioItem {
  src: string;
  alt: string;
  description: string;
  category: string;
  width: number;
  height: number;
}

// Define categories
const categories = [
  "All",
  "Fotos 2x2",
  "Sesiones familiares",
  "Comercios",
  "Bodas",
  "Otros",
];

// Sample portfolio images - these would be replaced with actual images
// Ideally, you would import images directly using:
// import image1 from '../assets/images/gallery/image1.jpg';
// Or use Astro.glob if you have a directory of images to import dynamically

// For now, we'll use placeholder images
const portfolioImages: PortfolioItem[] = [
  {
    src: "https://images.pexels.com/photos/3812944/pexels-photo-3812944.jpeg",
    alt: "Fotografía profesional de estudio con iluminación especializada",
    description:
      "Configuración profesional de iluminación para sesiones de estudio",
    category: "Bodas",
    width: 800,
    height: 1200,
  },
  {
    src: "https://images.pexels.com/photos/2608517/pexels-photo-2608517.jpeg",
    alt: "Fotógrafo con cámara profesional en sesión al aire libre",
    description: "Capturando momentos especiales con equipo profesional",
    category: "Sesiones familiares",
    width: 1200,
    height: 800,
  },
  {
    src: "https://images.pexels.com/photos/1854897/pexels-photo-1854897.jpeg",
    alt: "Sesión de fotografía al aire libre con luz natural",
    description: "Fotografía natural aprovechando la luz del día",
    category: "Fotos 2x2",
    width: 800,
    height: 800,
  },
  {
    src: "https://images.pexels.com/photos/1813947/pexels-photo-1813947.jpeg",
    alt: "Equipo de fotografía profesional para sesiones comerciales",
    description:
      "Equipo especializado para fotografía de productos y comercios",
    category: "Comercios",
    width: 1200,
    height: 700,
  },
  {
    src: "https://images.pexels.com/photos/3059745/pexels-photo-3059745.jpeg",
    alt: "Sesión fotográfica de boda con pareja en escenario romántico",
    description: "Capturando el amor y la felicidad en el día más especial",
    category: "Bodas",
    width: 800,
    height: 1000,
  },
  {
    src: "https://images.pexels.com/photos/1261731/pexels-photo-1261731.jpeg",
    alt: "Retrato de estudio con iluminación profesional y fondo neutro",
    description: "Retratos de estudio con técnicas de iluminación avanzadas",
    category: "Otros",
    width: 900,
    height: 900,
  },
  {
    src: "https://images.pexels.com/photos/3062541/pexels-photo-3062541.jpeg",
    alt: "Sesión fotográfica familiar en exteriores con luz natural",
    description: "Sesiones familiares que capturan la conexión y el amor",
    category: "Sesiones familiares",
    width: 1000,
    height: 800,
  },
  {
    src: "https://images.pexels.com/photos/2613260/pexels-photo-2613260.jpeg",
    alt: "Fotografía profesional para documentos de identidad con fondo blanco",
    description: "Fotos 2x2 de alta calidad para documentos oficiales",
    category: "Fotos 2x2",
    width: 800,
    height: 1000,
  },
];

// Items to show initially
const ITEMS_PER_PAGE = 6;
---

<section id="portafolio" class="py-24 bg-black">
  <div
    class="absolute inset-0 opacity-[0.04]"
    style="background-image: url('https://grainy-gradients.vercel.app/noise.svg'); background-repeat: repeat;"
  >
  </div>

  <div class="container mx-auto px-4 md:px-6">
    <div class="text-center mb-12">
      <span class="text-gold-light text-sm tracking-wider">PORTAFOLIO</span>
      <h2 class="text-3xl md:text-4xl font-bold mt-2">
        Mi <span class="text-gold-light">Galería</span> de Trabajo
      </h2>
      <p class="text-white/60 mt-4 max-w-2xl mx-auto">
        Explora una selección de mi trabajo fotográfico en diferentes categorías
      </p>
    </div>

    <!-- Filter Buttons -->
    <div class="flex flex-wrap justify-center gap-2 mb-12">
      {
        categories.map((category) => (
          <Button
            variant="secondary"
            size="sm"
            text={category}
            class="category-filter"
            data-category={category}
          />
        ))
      }
    </div>

    <!-- Gallery Grid -->
    <div
      class="portfolio-grid columns-1 sm:columns-2 lg:columns-3 gap-4 lg:gap-6 space-y-4"
    >
      {
        portfolioImages.map((image, index) => (
          <div
            class={`relative overflow-hidden rounded-lg border border-white/10 hover:border-gold-light/30 transition-all duration-300 shadow-lg hover:shadow-gold/10 portfolio-item ${index >= ITEMS_PER_PAGE ? "hidden" : ""}`}
            data-category={image.category}
            data-index={index}
          >
            <img
              src={image.src}
              alt={image.alt}
              width={image.width}
              height={image.height}
              class="w-full h-auto object-cover transition-transform duration-300 hover:scale-105"
              loading={index < ITEMS_PER_PAGE ? "eager" : "lazy"}
            />
            <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 hover:opacity-100 transition-opacity duration-300 flex items-end p-4">
              <div>
                <p class="text-white text-sm font-semibold translate-y-2 hover:translate-y-0 transition-transform duration-300">
                  {image.alt}
                </p>
                <p class="text-white/70 text-xs mt-1">{image.description}</p>
              </div>
            </div>
          </div>
        ))
      }
    </div>

    <!-- Message for no images -->
    <p class="text-center text-white/50 mt-8 hidden no-images-message">
      No hay imágenes que coincidan con esta categoría.
    </p>

    <!-- Load More Button -->
    <div class="text-center mt-12">
      <Button
        id="load-more"
        variant="primary"
        text="Cargar Más"
        class="hidden"
      />
    </div>
  </div>

  <!-- Modal for lightbox -->
  <div
    id="image-modal"
    class="fixed inset-0 bg-black/90 z-50 hidden items-center justify-center p-4"
  >
    <button
      id="close-modal"
      class="absolute top-4 right-4 text-white hover:text-gold-light"
      aria-label="Cerrar galería"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-8 w-8"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
        aria-hidden="true"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
    <img
      id="modal-image"
      src=""
      alt=""
      class="max-h-[90vh] max-w-[90vw] object-contain"
    />
    <button
      id="prev-image"
      class="absolute left-4 top-1/2 -translate-y-1/2 text-white hover:text-gold-light"
      aria-label="Imagen anterior"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-8 w-8"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
        aria-hidden="true"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M15 19l-7-7 7-7"></path>
      </svg>
    </button>
    <button
      id="next-image"
      class="absolute right-4 top-1/2 -translate-y-1/2 text-white hover:text-gold-light"
      aria-label="Siguiente imagen"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-8 w-8"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
        aria-hidden="true"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M9 5l7 7-7 7"></path>
      </svg>
    </button>
  </div>
</section>

<script>
  // Elements
  const portfolioItems =
    document.querySelectorAll<HTMLElement>(".portfolio-item");
  const categoryFilters =
    document.querySelectorAll<HTMLButtonElement>(".category-filter");
  const loadMoreButton = document.getElementById(
    "load-more"
  ) as HTMLButtonElement | null;
  const noImagesMessage =
    document.querySelector<HTMLParagraphElement>(".no-images-message");

  // Modal elements
  const imageModal = document.getElementById(
    "image-modal"
  ) as HTMLDivElement | null;
  const modalImage = document.getElementById(
    "modal-image"
  ) as HTMLImageElement | null;
  const closeModal = document.getElementById(
    "close-modal"
  ) as HTMLButtonElement | null;
  const prevButton = document.getElementById(
    "prev-image"
  ) as HTMLButtonElement | null;
  const nextButton = document.getElementById(
    "next-image"
  ) as HTMLButtonElement | null;

  // State
  let currentFilter = "All";
  let currentPage = 1;
  let itemsPerPage = 6;
  let currentModalIndex = 0;
  let visibleItems: HTMLElement[] = [];

  // Initialize
  function init() {
    // Set "All" as active filter initially
    categoryFilters.forEach((filter) => {
      if (filter.dataset.category === "All") {
        filter.classList.add("bg-gold-light", "text-black");
        filter.classList.remove(
          "border-gold-light",
          "text-gold-light",
          "hover:bg-gold-light/10"
        );
      }
    });

    // Apply filters and update view
    applyFilter("All");

    // Add event listeners
    categoryFilters.forEach((filter) => {
      filter.addEventListener("click", () => {
        currentPage = 1;
        applyFilter(filter.dataset.category || "All");

        // Update active filter styles
        categoryFilters.forEach((f) => {
          if (f.dataset.category === filter.dataset.category) {
            f.classList.add("bg-gold-light", "text-black");
            f.classList.remove(
              "border-gold-light",
              "text-gold-light",
              "hover:bg-gold-light/10"
            );
          } else {
            f.classList.remove("bg-gold-light", "text-black");
            f.classList.add(
              "border-gold-light",
              "text-gold-light",
              "hover:bg-gold-light/10"
            );
          }
        });
      });
    });

    // Load more event
    loadMoreButton?.addEventListener("click", () => {
      currentPage++;
      updateVisibleItems();
    });

    // Modal events
    portfolioItems.forEach((item) => {
      item.addEventListener("click", () => {
        const index = parseInt(item.dataset.index || "0");
        openModal(index);
      });
    });

    closeModal?.addEventListener("click", () => {
      imageModal?.classList.add("hidden");
      imageModal?.classList.remove("flex");
    });

    prevButton?.addEventListener("click", () => {
      navigateModal(-1);
    });

    nextButton?.addEventListener("click", () => {
      navigateModal(1);
    });

    // Close modal with escape key
    document.addEventListener("keydown", (e) => {
      if (
        e.key === "Escape" &&
        imageModal &&
        !imageModal.classList.contains("hidden")
      ) {
        imageModal.classList.add("hidden");
        imageModal.classList.remove("flex");
      } else if (
        e.key === "ArrowLeft" &&
        imageModal &&
        !imageModal.classList.contains("hidden")
      ) {
        navigateModal(-1);
      } else if (
        e.key === "ArrowRight" &&
        imageModal &&
        !imageModal.classList.contains("hidden")
      ) {
        navigateModal(1);
      }
    });
  }

  // Apply category filter
  function applyFilter(category: string) {
    currentFilter = category;

    // Reset visible items
    portfolioItems.forEach((item) => {
      item.classList.add("hidden");
    });

    // Filter items
    visibleItems = Array.from(portfolioItems).filter((item) => {
      return category === "All" || item.dataset.category === category;
    }) as HTMLElement[];

    // Update no images message
    if (visibleItems.length === 0) {
      noImagesMessage?.classList.remove("hidden");
      loadMoreButton?.classList.add("hidden");
    } else {
      noImagesMessage?.classList.add("hidden");
      updateVisibleItems();
    }
  }

  // Update visible items based on current page
  function updateVisibleItems() {
    const itemsToShow = Math.min(
      currentPage * itemsPerPage,
      visibleItems.length
    );

    // Show items for current page
    for (let i = 0; i < itemsToShow; i++) {
      visibleItems[i].classList.remove("hidden");
    }

    // Update load more button
    if (itemsToShow < visibleItems.length) {
      loadMoreButton?.classList.remove("hidden");
    } else {
      loadMoreButton?.classList.add("hidden");
    }
  }

  // Open modal with image
  function openModal(index: number) {
    // Find the actual visible index
    const visibleIndex = visibleItems.findIndex(
      (item) => parseInt(item.dataset.index || "0") === index
    );
    if (visibleIndex === -1) return;

    currentModalIndex = visibleIndex;
    const imgElement = visibleItems[currentModalIndex].querySelector(
      "img"
    ) as HTMLImageElement;
    if (!imgElement || !modalImage || !imageModal) return;

    modalImage.src = imgElement.src;
    modalImage.alt = imgElement.alt;
    imageModal.classList.remove("hidden");
    imageModal.classList.add("flex");
  }

  // Navigate through modal images
  function navigateModal(direction: number) {
    currentModalIndex =
      (currentModalIndex + direction + visibleItems.length) %
      visibleItems.length;
    const imgElement = visibleItems[currentModalIndex].querySelector(
      "img"
    ) as HTMLImageElement;
    if (!imgElement || !modalImage) return;

    modalImage.src = imgElement.src;
    modalImage.alt = imgElement.alt;
  }

  // Initialize on page load
  document.addEventListener("DOMContentLoaded", init);
</script>
